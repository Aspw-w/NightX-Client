plugins {
    id "java"
    id "idea"
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge"
    id "org.spongepowered.mixin"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://maven.minecraftforge.net/" }
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://repo.viaversion.com" }
    maven { url = "https://jitpack.io/" }
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dfml.coreMods.load=net.aspw.client.injection.forge.MixinLoader", "-Ddev-mode"]
}

configurations {
    include
    implementation.extendsFrom(include)

    external
    compile.extendsFrom(external)

    runtimeOnly.canBeResolved = true
}

def viaLibs = [
        "com.viaversion:viaversion:${project.viaversion_version}",
        "com.viaversion:viabackwards:${project.viabackwards_version}",
        "com.viaversion:viarewind-universal:${project.viarewind_version}",
        "net.raphimc:ViaLoader:${project.vialoader_version}",
        "net.raphimc:ViaAprilFools:${project.viaaprilfools_version}",
        "org.yaml:snakeyaml:${project.snake_yml_version}",
        "org.slf4j:slf4j-api:${project.slf4j_version}"
]

dependencies {
    include("org.spongepowered:mixin:${project.mixin_version}") {
        transitive = false
        exclude module: "guava"
        exclude module: "commons-io"
        exclude module: "gson"
        exclude module: "launchwrapper"
        exclude module: "log4j-core"
        exclude module: "slf4j-api"
    }

    for (final def via in viaLibs) {
        include(via)
    }

    include ("net.raphimc:ViaLegacy:${project.vialegacy_version}") {
        exclude group: "com.google.code.gson", module: "gson"
    }

    include('com.github.half-cambodian-hacker-man:Koffee:d8cee73') {
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'asm'
    }

    annotationProcessor("org.spongepowered:mixin:${project.mixin_version}")

    include "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    include("com.jagrosh:DiscordIPC:0.4") {
        exclude module: "log4j"
    }

    include("com.github.CCBlueX:Elixir:1.2.6") {
        exclude module: "kotlin-stdlib"
        exclude module: "authlib"
    }

    include ('com.github.TheAltening:TheAltening4j:-SNAPSHOT') {
        exclude module: "gson"
    }
    include 'com.github.TheAltening:TheAlteningAuth4j:-SNAPSHOT'

    include 'com.github.ben-manes.caffeine:caffeine:2.9.0'
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "LICENSE.txt"

    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"

    exclude "org/apache/**"
    exclude "org/junit/**"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    rename "(.+_at.cfg)", "META-INF/\$1"
}

tasks.register('moveResources') {
    doLast {
        "${buildDir}/classes/java"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)

jar {
    manifest.attributes(
            "FMLCorePlugin": "net.aspw.client.injection.forge.MixinLoader",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true,
            "MixinConfigs": "client.forge.mixins.json",
            "ModSide": "CLIENT",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": "0",
            "FMLAT": "client_at.cfg",
    )

    enabled = false
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "client.mixins.refmap.json"
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

tasks.reobfShadowJar.mustRunAfter shadowJar

tasks.reobfJar.dependsOn(shadowJar)

jar.dependsOn("shadowJar")

configurations {
    compileClasspath {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
    include {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
}